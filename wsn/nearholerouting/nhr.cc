#include <packet.h>
#include "nhr_packet.h"
#include "nhr.h"

int hdr_nhr::offset_;

static class NHRHeaderClass : public PacketHeaderClass {
public:
    NHRHeaderClass() : PacketHeaderClass("PacketHeader/NHR", sizeof(hdr_nhr)) {
        bind_offset(&hdr_nhr::offset_);
    }
} class_nhrhdr;

static class NHRAgentClass : public TclClass {
public:
    NHRAgentClass() : TclClass("Agent/NHR") { }

    TclObject *create(int, const char *const *) {
        return (new NHRAgent());
    }
} class_nhr;


NHRAgent::NHRAgent() : BoundHoleAgent() {
}


void NHRAgent::recv(Packet *p, Handler *h) {
    struct hdr_cmn *cmh = HDR_CMN(p);
    struct hdr_ip *iph = HDR_IP(p);

    if (cmh->ptype() == PT_CBR) {
        if (iph->saddr() == my_id_)                // a packet generated by myself
        {
            if (cmh->num_forwards() == 0)        // a new packet
            {
                sendData(p);
            }
        }
        if (iph->ttl_-- <= 0) {
            drop(p, DROP_RTR_TTL);
            return;
        }
        recvData(p);
    }
    else
        BoundHoleAgent::recv(p, h);
}

int NHRAgent::command(int argc, const char *const *argv) {
    if (argc == 2) {
        if (strcasecmp(argv[1], "routing") == 0) {
            return TCL_OK;
        }
    }
    return BoundHoleAgent::command(argc, argv);
}

void NHRAgent::createHole(Packet *p) {
    polygonHole *h = createPolygonHole(p);
    h->circleNodeList();
    h->next_ = hole_list_;
    hole_list_ = h;
}

void NHRAgent::sendData(Packet *p) {

}

void NHRAgent::recvData(Packet *p) {

}
